// Defer Intercom loading
window.intercomSettings = {
  api_base: "https://api-iam.intercom.io",
  app_id: "x55eda6t"
};

// Load scripts sequentially to respect dependencies
function loadScript(src) {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = src;
    script.async = true;
    script.onload = () => {
      // Add a small delay to ensure script is fully initialized
      setTimeout(resolve, 100);
    };
    script.onerror = reject;
    document.body.appendChild(script);
  });
}

// Initialize Intercom
function initIntercom() {
  try {
    const w = window;
    const ic = w.Intercom;
    if (typeof ic === "function") {
      ic('reattach_activator');
      ic('update', w.intercomSettings);
    } else {
      const d = document;
      const i = function() {
        i.c(arguments);
      };
      i.q = [];
      i.c = function(args) {
        i.q.push(args);
      };
      w.Intercom = i;
  
      const s = d.createElement('script');
      s.type = 'text/javascript';
      s.async = true;
      s.src = 'https://widget.intercom.io/widget/' + window.intercomSettings.app_id;
      const x = d.getElementsByTagName('script')[0];
      x.parentNode.insertBefore(s, x);
    }
  } catch (error) {
    console.log('Error initializing Intercom:', error);
  }
}

// Load dependencies and initialize
async function loadIntercom() {
  try {
    // Load CryptoJS dependencies in correct order
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js');
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/sha256.js');
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/hmac.js');
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js');

    // Verify CryptoJS is loaded
    if (typeof window?.CryptoJS === 'undefined') {
      throw new Error('CryptoJS failed to load');
    }

    // Initialize Intercom
    initIntercom();
  } catch (error) {
    console.error('Error loading Intercom dependencies:', error);
  }
}

// Defer loading until after page load
if (document.readyState === 'complete') {
  setTimeout(loadIntercom, 3000);
} else {
  window.addEventListener('load', () => setTimeout(loadIntercom, 3000));
}
